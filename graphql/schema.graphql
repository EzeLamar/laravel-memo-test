scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    memoTests: [MemoTest!]! @all
    memoTest(id: Int! @eq): MemoTest @find
    
    gameSession(id: Int! @eq): GameSession @find
    
    user(
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
      ): User @find
      users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

type Mutation {
  createMemoTest(name: String!, images: [String!]!): MemoTest! @create
  updateMemoTest(id: ID!, name: String, images: [String!]!): MemoTest @update
  deleteMemoTest(id: ID! @whereKey): MemoTest @delete

  createGameSession(input: CreateGameSessionInput! @spread): GameSession @create
  updateGameSession(id: ID!, state:StateType, retries: Int, numberOfPairs: Int): GameSession! @update
  deleteGameSession(id: ID! @whereKey): GameSession @delete
}

input CreateGameSessionInput {
  state:StateType!
  retries: Int!
  numberOfPairs: Int!
  memoTest: CreateMemoTestRelation!
  player: CreatePlayerRelation!
}

input CreateMemoTestRelation {
  connect: ID!
}

input CreatePlayerRelation {
  connect: ID!
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    gameSessions: [GameSession!]! @hasMany
}

enum StateType {
  STARTED @enum(value: "Started")
  COMPLETED @enum(value: "Completed")
}

type GameSession {
  id: ID!
  retries: Int!
  numberOfPairs: Int!
  state: StateType!
  player: User! @belongsTo
  memoTest: MemoTest! @belongsTo
}

type MemoTest {
  id: ID!
  name: String!
  images: [String!]!
}
